{"config":{"lang":["en"],"separator":"[\\s\\-]+","pipeline":["stopWordFilter"]},"docs":[{"location":"","title":"\u7b80\u4ecb","text":"<p> \ud83c\udfdd Simplify Cloud Native Microservices development base on FastAPI and gRPC. </p> <p> </p>"},{"location":"#_2","title":"\u7b80\u4ecb","text":"<p>\u7b80\u5316\u57fa\u4e8e FastAPI \u548c gRPC \u7684\u4e91\u539f\u751f\u5fae\u670d\u52a1\u5f00\u53d1\u3002\u5982\u679c\u4f60\u60f3\u8ba9\u4f60\u7684\u9879\u76ee\u540c\u65f6\u652f\u6301 HTTP \u548c gRPC ,\u90a3\u4e48 Bali \u53ef\u4ee5\u5e2e\u52a9\u4f60\u5f88\u8f7b\u677e\u7684\u5b8c\u6210\u3002 </p> <p>Bali \u7684\u7279\u6027\uff1a</p> <ul> <li>\u9879\u76ee\u7ed3\u6784\u7b80\u5355\u3002</li> <li>\u878d\u5408\u4e86 <code>SQLAlchemy</code> \u5e76\u63d0\u4f9b\u4e86 model \u751f\u6210\u7684\u65b9\u6cd5\u3002</li> <li>\u63d0\u4f9b\u4e86\u5de5\u5177\u7c7b\u8f6c\u6362 model \u6210\u4e3a Pydantic \u6a21\u5f0f.</li> <li>\u652f\u6301 GZip \u89e3\u538b\u7f29.</li> <li>\ud83c\udf7b Resource \u5c42\u5904\u7406\u5bf9\u5916\u670d\u52a1\u5373\u652f\u6301 HTTP \u53c8\u652f\u6301 gRPC</li> <li>\u652f\u6301 Event \u53d1\u9001\u53ca\u76d1\u542c</li> </ul>"},{"location":"#bali","title":"\u8c01\u5728\u4f7f\u7528 Bali \u6846\u67b6","text":""},{"location":"#_3","title":"\u4f9d\u8d56","text":"<ol> <li>Python 3.7+</li> <li>FastAPI 0.63+</li> <li>grpcio&gt;=1.32.0,&lt;1.42</li> </ol>"},{"location":"#_4","title":"\u5b89\u88c5","text":"<pre><code># Bali framework\npip install bali-core \n\n# Bali command line tool \npip install bali-cli  \n</code></pre>"},{"location":"application/","title":"Application","text":"<p>Create Application</p> <pre><code>import greeter_server\n# Initialized App \napp = Bali()\n# Updated settings\napp.settings(base_settings={'title': 'Bali App'})\n</code></pre> <p>Launch </p> <pre><code># lauch RPC \npython main.py --rpc\n# lauch HTTP\npython main.py --http\n</code></pre> <p>More usage of <code>Application</code>: example</p>"},{"location":"cache/","title":"Cache","text":""},{"location":"cache/#cache-api","title":"Cache API","text":"<pre><code>from bali.core import cache\n# Usage example (API)\n# Read cache \ncache.get(key)\n# Set cache \ncache.set(key, value, timeout=10)\n</code></pre>"},{"location":"cache/#cache-memoize","title":"cache memoize","text":"<pre><code># Import the cache_memoize from bali core \nfrom bali.core import cache_memoize\n# Attach decorator to cacheable function with a timeout of 100 seconds.\n@cache_memoize(100)\ndef expensive_function(start, end):\n    return random.randint(start, end)\n</code></pre>"},{"location":"database/","title":"Database","text":""},{"location":"database/#connect","title":"connect","text":"<pre><code>from bali.core import db\n# connect to database when app started\n# db is a sqla-wrapper instance\ndb.connect('DATABASE_URI')  \n</code></pre>"},{"location":"database/#declarative-mode-with-sqla-wrapper","title":"Declarative mode with sqla-wrapper","text":"<pre><code>class User(db.Model):\n    __tablename__ \"users\"\n    id = db.Column(db.Integer, primary_key=True)\n    ...\ndb.create_all()\ndb.add(User(...))\ndb.commit()\ntodos = db.query(User).all()\n</code></pre> <p>More convenient usage, ref to SQLA-Wrapper</p>"},{"location":"database/#declare-models-inherit-from-convenient-base-models","title":"Declare models inherit from convenient base models","text":"<p>BaseModel</p> <pre><code># using BaseModel\nclass User(db.BaseModel):\n    __tablename__ \"users\"\n    id = db.Column(db.Integer, primary_key=True)\n    ...\n</code></pre> <pre><code># BaseModel's source code \nclass BaseModel(db.Model):\n    __abstract__ = True\n    created_time = Column(DateTime(timezone=True), default=datetime.utcnow)\n    updated_time = Column(\n        DateTime(timezone=True), default=datetime.utcnow, onupdate=datetime.utcnow\n    )\n    is_active = Column(Boolean(), default=True)\n</code></pre>"},{"location":"database/#transaction","title":"Transaction","text":"<p>SQLA-wrapper default model behavior is auto commit, auto commit will be disabled with <code>db.transaction</code> context. </p> <pre><code>with db.transaction():\n    item = Item.create(name='test1')\n</code></pre>"},{"location":"database/#operators","title":"Operators","text":"<p>Operators provided <code>get_filters_expr</code> to transform filters (dict) to SQLAlchemy expressions.  </p> <pre><code>from bali.db.operators import get_filters_expr\nfrom models import User\nusers = User.query().filter(*get_filters_expr(User, **filters)).all()\n</code></pre>"},{"location":"event/","title":"\u4e8b\u4ef6","text":""},{"location":"event/#event","title":"Event","text":"<p>\u6d88\u606f\u4f9d\u8d56 AMQP \u7ec4\u4ef6\uff0c\u6240\u4ee5\u9700\u8981\u8fdb\u884c\u76f8\u5e94\u914d\u7f6e\uff0c\u4f8b\u5982\u5728\u4f60\u7684\u9879\u76ee\u4e2d settings.py \u91cc\u9762\u52a0\u5165\u8fd9\u6bb5\u914d\u7f6e</p> <pre><code>class Settings:\n    AMQP_CONFIGS = {\n        'default':\n            {\n                'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672',\n                'EXCHANGE_NAME': 'exchange_name',\n                'QUEUE_NAME': 'queue_name',\n                'ROUTING_KEY': 'routing_key',\n            }\n    }\n\nsettings = Settings()\ninitialize(settings)\n</code></pre> <p>\u5b9a\u4e49 Event  <pre><code>from bali.events import Event\n\nclass HelloEvent(Event):\n    # \u8fd9\u91cc\u7684 __amqp_name__ \u9ed8\u8ba4\u5c31\u662f default\uff0c\n    # \u4ee3\u8868\u4f7f\u7528\u7684\u662f default \u7684 AMQP \u914d\u7f6e\n    __amqp_name__ = 'default' \n\n    def dict(self, *args, **kwargs):\n        # \u91cd\u5199 dict \uff0c\u53ef\u4ee5\u8ba9 event \u6309\u7167\u4f60\u5b9a\u4e49\u7684\u65b9\u5f0f\u5728 AMQP \u7ec4\u4ef6\u4e2d\u4f20\u8f93\uff0c \n        # \u5982\u679c\u4e0d\u91cd\u5199 dict\uff0c\u90a3\u4e48\u6d88\u606f\u5c06\u662f {'type': self.type, 'payload': self.payload}\n        return {'type': self.type, **self.payload}\n</code></pre></p> <p>\u53d1\u9001\u4e8b\u4ef6\uff1a <pre><code>dispatch(HelloEvent(type='hello', payload={'aaa':'bbb'}))\n</code></pre></p> <p>\u4e8b\u4ef6\u76d1\u542c\uff1a</p> <p>\u9996\u5148\u9700\u8981\u5b9a\u4e49\u4e8b\u4ef6\u7684\u5904\u7406 handle_event \u53ca\u76d1\u542c\u4e8b\u4ef6\u7684\u7c7b\u578b hello</p> <pre><code>class EventHandler:\n    @event_handler('hello')\n    def handle_event(event):\n        print(event)\n</code></pre> <p>\u4e8b\u4ef6\u7c7b\u578b\u5bf9\u5e94\u7684 AMQP \u914d\u7f6e\uff1a <pre><code>class Settings:\n    AMQP_CONFIGS = {\n        'default':\n            {\n                'AMQP_SERVER_ADDRESS': 'amqp://user:password@localhost:5672',\n                'EXCHANGE_NAME': 'exchange_name',\n                'QUEUE_NAME': 'queue_name',\n                'ROUTING_KEY': 'routing_key',\n            }\n    }\n    EVENT_TYPE_TO_AMQP = {\n        'hello': 'default'\n    }\n\nsettings = Settings()\ninitialize(settings)\n</code></pre></p> <p>\u5f00\u59cb\u76d1\u542c\u4e8b\u4ef6\uff1a <pre><code>python main.py --event\n</code></pre></p>"},{"location":"quick-start/","title":"Quick Start","text":""},{"location":"release-notes/","title":"Release Notes","text":"<p>Change Log</p> <p>All notable changes to this project will be documented in this file.</p> <p>This project adheres to Semantic Versioning.</p> <p>includes Added / Changed / Fixed </p>"},{"location":"release-notes/#330-unreleased","title":"[3.3.0] UNRELEASED","text":""},{"location":"release-notes/#320-2022-06-16","title":"[3.2.0] 2022-06-16","text":""},{"location":"release-notes/#added","title":"Added","text":"<ul> <li>The concept of <code>manager</code> is introduced \ud83e\udd42</li> <li>New elegant model API methods \ud83e\udd42 PR#122</li> <li>Added <code>db.Base</code> declarative_base</li> <li>Application add <code>__clear__</code> for the convenience of unit testing</li> <li>Generated gRPC servicer for register resources \ud83c\udf55 PR#125</li> <li>Introduce <code>pytest-grpc</code> for RPC service testing</li> </ul>"},{"location":"release-notes/#changed","title":"Changed","text":"<ul> <li>Removed deprecated <code>connection.retry_on_deadlock_decorator</code></li> <li>Removed deprecated <code>connection.close_connection</code></li> <li>Updated related projects link comes from bali framework organization</li> <li>Removed deprecated <code>bali.schema</code>, use <code>bali.schemas</code> instead</li> <li>Marked <code>GRPCTestBase</code> as deprecated, will removed in v3.5</li> <li>Add more unit tests to ensure project quality \ud83c\udfc4\u200d</li> </ul>"},{"location":"release-notes/#fixed","title":"Fixed","text":"<ul> <li>Fixed initialize http service every requests</li> <li>Optimized and fixed ModelResource in resource register style</li> </ul>"},{"location":"release-notes/#310-316-2020-04-30-2020-05-23","title":"[3.1.0 ~ 3.1.6] 2020-04-30 ~ 2020-05-23","text":""},{"location":"release-notes/#added_1","title":"Added","text":"<ul> <li><code>Event</code> supported</li> <li>RabbitMQ fanout exchange support</li> </ul>"},{"location":"release-notes/#fixed_1","title":"Fixed","text":"<ul> <li>Compatible legacy SQLA-Wrapper SessionProxy</li> </ul>"},{"location":"release-notes/#300-2022-04-24","title":"[3.0.0] 2022-04-24","text":""},{"location":"release-notes/#added_2","title":"Added","text":"<ul> <li>Upgraded to sql-wrapper v5.0.0</li> <li>Supported uvicorn 0.15</li> <li>Model support asynchronous</li> <li>Resource support asynchronous</li> </ul>"},{"location":"release-notes/#changed_1","title":"Changed","text":"<ul> <li>Removed main.py default launch behavior</li> </ul>"},{"location":"release-notes/#213-2021-11-19","title":"[2.1.3] 2021-11-19","text":""},{"location":"release-notes/#added_3","title":"Added","text":"<ul> <li>timezone added <code>localtime</code>/<code>localdate</code></li> </ul>"},{"location":"release-notes/#210-2021-10-14","title":"[2.1.0] 2021-10-14","text":""},{"location":"release-notes/#changed_2","title":"Changed","text":"<ul> <li>Adjusted version range dependency packages</li> </ul>"},{"location":"release-notes/#200-2021-05-26","title":"[2.0.0] 2021-05-26","text":""},{"location":"release-notes/#added_4","title":"Added","text":"<ul> <li>Resource layer base class, support elegant RESTful CRUD</li> <li>Refactor core layer, support multi dotenv variables</li> <li>Handle metadata or context</li> </ul>"},{"location":"release-notes/#121-2021-03-22","title":"[1.2.1] 2021-03-22","text":""},{"location":"release-notes/#changed_3","title":"Changed","text":"<ul> <li>Added custom route class support clear SQLAlchemy scoped session</li> </ul>"},{"location":"release-notes/#120-2021-03-21","title":"[1.2.0] 2021-03-21","text":""},{"location":"release-notes/#changed_4","title":"Changed","text":"<ul> <li>Added custom APIRouter support clear SQLAlchemy scoped session</li> </ul>"},{"location":"release-notes/#112-2021-03-20","title":"[1.1.2] 2021-03-20","text":""},{"location":"release-notes/#fixed_2","title":"Fixed","text":"<ul> <li>Fixed close and remove session when FastAPI request completed</li> </ul>"},{"location":"release-notes/#changed_5","title":"Changed","text":"<ul> <li>Added SQLAlchemy pool_recycle setting, default value is 2 hours</li> </ul>"},{"location":"release-notes/#110-2021-03-03","title":"[1.1.0] 2021-03-03","text":""},{"location":"release-notes/#added_5","title":"Added","text":"<ul> <li>Added timezone settings and utility</li> <li>RPC logging when defined log handler</li> <li>New model method bind to BaseModel: count() and get_fields()</li> </ul>"},{"location":"release-notes/#103-2021-02-20","title":"[1.0.3] 2021-02-20","text":""},{"location":"release-notes/#fixed_3","title":"Fixed","text":"<ul> <li>locked uvicorn version (0.12.3) to fixed runtime error</li> </ul>"},{"location":"release-notes/#100-2021-01-26","title":"[1.0.0] 2021-01-26","text":""},{"location":"release-notes/#added_6","title":"Added","text":"<ul> <li>Added db stub file to improve code intelligence</li> <li>Ensure db remove even though exception raised</li> </ul>"},{"location":"release-notes/#fixed_4","title":"Fixed","text":"<ul> <li>gRPC base tests lost <code>ProcessInterceptor</code></li> </ul>"},{"location":"release-notes/#073-2021-01-14","title":"[0.7.3] 2021-01-14","text":""},{"location":"release-notes/#added_7","title":"Added","text":"<ul> <li>Added FastAPI Request GZip decompression</li> </ul>"},{"location":"release-notes/#072-2021-01-14","title":"[0.7.2] 2021-01-14","text":""},{"location":"release-notes/#added_8","title":"Added","text":"<ul> <li>GZipMiddleware</li> </ul>"},{"location":"release-notes/#071-2021-01-07","title":"[0.7.1] 2021-01-07","text":""},{"location":"release-notes/#added_9","title":"Added","text":"<ul> <li>Added gRPC interceptor process setup &amp; teardown</li> <li>Added FastAPI middleware process setup &amp; teardown</li> </ul>"},{"location":"release-notes/#070-2020-12-18","title":"[0.7.0] 2020-12-18","text":""},{"location":"release-notes/#added_10","title":"Added","text":"<ul> <li>Added cache backend with Redis</li> <li>Added dateparse utility</li> </ul>"},{"location":"release-notes/#fixed_5","title":"Fixed","text":"<ul> <li>Fixed add_XXXServiceServicer_to_server in GRPCTestBase</li> </ul>"},{"location":"release-notes/#060-2020-11-26","title":"[0.6.0] 2020-11-26","text":""},{"location":"release-notes/#added_11","title":"Added","text":"<ul> <li>Added bali Application Wrapper</li> </ul>"},{"location":"release-notes/#053-2020-11-23","title":"[0.5.3] 2020-11-23","text":""},{"location":"release-notes/#added_12","title":"Added","text":"<ul> <li>Added <code>to_dict()</code> method to BaseModel</li> </ul>"},{"location":"release-notes/#052-2020-11-23","title":"[0.5.2] 2020-11-23","text":""},{"location":"release-notes/#fixed_6","title":"Fixed","text":"<ul> <li>Fixed lost package <code>pydantic-sqlalchemy</code></li> </ul>"},{"location":"release-notes/#051-2020-11-19","title":"[0.5.1] 2020-11-19","text":""},{"location":"release-notes/#fixed_7","title":"Fixed","text":"<ul> <li>Fixed BaseModel's updated_time</li> </ul>"},{"location":"release-notes/#050-2020-11-19","title":"[0.5.0] 2020-11-19","text":""},{"location":"release-notes/#added_13","title":"Added","text":"<ul> <li>Added model utility <code>BaseModel</code></li> <li>Added convenient way to generate Pydantic model</li> </ul>"},{"location":"release-notes/#041-2020-11-12","title":"[0.4.1] 2020-11-12","text":""},{"location":"release-notes/#changed_6","title":"Changed","text":"<ul> <li>Removed <code>NextBase</code> replaced by <code>db.Model</code></li> </ul>"},{"location":"release-notes/#040-2020-11-11","title":"[0.4.0] 2020-11-11","text":""},{"location":"release-notes/#added_14","title":"Added","text":"<ul> <li>Added <code>NextBase</code> enhanced declarative base</li> </ul>"},{"location":"release-notes/#030-2020-11-02","title":"[0.3.0] 2020-11-02","text":""},{"location":"release-notes/#added_15","title":"Added","text":"<p>-- Added gRPC service unit test base class</p>"},{"location":"release-notes/#fixed_8","title":"Fixed","text":"<ul> <li>Fixed MAXIMUM_RETRY_ON_DEADLOCK not defined issue</li> </ul>"},{"location":"release-notes/#021-2020-10-23","title":"[0.2.1] 2020-10-23","text":""},{"location":"release-notes/#added_16","title":"Added","text":"<ul> <li>Added SQLAlchemy declarative Base</li> </ul>"},{"location":"release-notes/#020-2020-10-23","title":"[0.2.0] 2020-10-23","text":""},{"location":"release-notes/#added_17","title":"Added","text":"<ul> <li>Added code formatter <code>yapf</code>.</li> <li>Added sqla-wrapper</li> <li>Migrated db layer to core</li> <li>Added gRPC service mixin to close database connection</li> </ul>"},{"location":"release-notes/#010-2020-10-13","title":"[0.1.0] 2020-10-13","text":""},{"location":"release-notes/#added_18","title":"Added","text":"<ul> <li>Added gRPC / FastAPI stack requirements</li> </ul>"},{"location":"resource/","title":"\u8d44\u6e90","text":""},{"location":"resource/#resource","title":"Resource","text":"<p>\u5728\u7248\u672c 2.0. \u4e2d\u52a0\u5165</p> <p>Resource\u7684\u8bbe\u8ba1\u501f\u9274\u4e86REST\u4f53\u7cfb\u7ed3\u6784\u98ce\u683c\u7684\u51e0\u4e2a\u5173\u952e\u6982\u5ff5\u3002</p> <p>\u7075\u611f\u6765\u81ea\u4e8eDjango REST\u6846\u67b6\u4e2d\u7684' ViewSet '\u3002</p> <p>Actions \u547d\u540d\u4f9d\u636e <code>Standard methods</code> in Google API design guide </p>"},{"location":"resource/#httprpc","title":"\u901a\u7528 HTTP/RPC \u652f\u6301\u64cd\u4f5c","text":"<p>\u901a\u7528 HTTP/RPC \u652f\u6301\u64cd\u4f5c:</p> Action Route Method RPC Description get /{id} GET Get{Resource} \u83b7\u53d6\u4e0e\u7ed9\u5b9aid\u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 list / GET List{Resource} \u83b7\u53d6\u6240\u6709\u8d44\u6e90 create / POST Create{Resource} \u521b\u5efa\u4e00\u4e2a\u65b0\u7684\u8d44\u6e90 update /{id} PATCH Update{Resource} \u66f4\u65b0\u4e0e\u7ed9\u5b9a id \u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 delete /{id} DELETE Delete{Resource} \u5220\u9664\u4e0e\u7ed9\u5b9a id \u5339\u914d\u7684\u73b0\u6709\u8d44\u6e90 <p>\u901a\u7528\u793a\u4f8b:</p> <pre><code># 1. import `Resource` base class\nfrom bali.resources import Resource\n# 2. implementation actions inherited from Resource\nclass GreeterResource(Resource):\n    schema = Greeter\n    @action()\n    def get(self, pk=None):\n        return [g for g in GREETERS if g.get('id') == pk][0]\n    @action()\n    def list(self, schema_in: ListRequest):\n        return GREETERS[:schema_in.limit]\n    @action()\n    def create(self, schema_in: schema):\n        return {'id': schema_in.id, 'content': schema_in.content}\n    @action()\n    def update(self, schema_in: schema, pk=None):\n        return {'id': pk, 'content': schema_in.content}\n    @action()\n    def delete(self, pk=None):\n        return {'id': pk, 'result': True}  # using `id` instand of `result`\n</code></pre>"},{"location":"resource/#httprpc-actions","title":"\u7528\u6237\u81ea\u5b9a\u4e49 HTTP/RPC Actions","text":"<p>\u7528\u6237\u81ea\u5b9a\u4e49\u7684 Action \u8fd8\u662f\u9700\u8981\u4f7f\u7528 <code>@action</code>, \u5355\u662f\u53c2\u6570 <code>detail</code> \u5fc5\u987b\u8981\u8bbe\u7f6e.</p> <pre><code>@action(detail=False)\ndef custom_action(self):\n    pass\n</code></pre> <p><code>detail</code> \u6ca1\u6709\u9ed8\u8ba4\u503c.</p> <p><code>True</code> \u4ee3\u8868 action \u5bf9\u5e94\u7684\u662f\u5355\u4e2a\u8d44\u6e90, url \u4e3a '/{resources}/{id}'.</p> <p><code>False</code> \u4ee3\u8868 action \u5bf9\u5e94\u7684\u662f\u4e00\u4e2a\u8d44\u6e90\u96c6, url \u4e3a '/{resources}'.</p>"},{"location":"resource/#http-actions","title":"\u91cd\u5199 HTTP Actions","text":"<p>\u5982\u679c\u9ed8\u8ba4\u7684HTTP\u52a8\u4f5c\u6a21\u677f\u4e0d\u80fd\u6ee1\u8db3\u60a8\u7684\u8bf7\u6c42\uff0c\u60a8\u53ef\u4ee5\u8986\u76d6HTTP\u52a8\u4f5c\u3002</p> <pre><code># Get the origin router \nrouter = GreeterResource.as_router()\n# Override the actions using the FastAPI normal way\n@router.get(\"/\")\ndef root():\n    return {\"message\": \"Hello World\"}\n</code></pre> <p>\u66f4\u591a\u5173\u4e8e <code>Resource</code>: GreeterResource</p>"},{"location":"resource/#modelresource","title":"ModelResource","text":"<p>\u5728\u7248\u672c 2.1. \u4e2d\u65b0\u589e</p> <pre><code>class UserResource(ModelResource):\n    model = User\n    schema = UserSchema\n    filters = [\n        {'username': str},\n        {'age': Optional[str]},\n    ]  # yapf: disable\n    permission_classes = [IsAuthenticated]\n</code></pre>"},{"location":"schema/","title":"Schema","text":"<p>model_to_schema</p> <pre><code># generate pydantic schema from models\n# `User` is a db.Model or db.BaseModel instance \nfrom bali.schemas import model_to_schema\nUserSchema = model_to_schema(User)\n</code></pre>"},{"location":"testing/","title":"Testing","text":"<p>gRPC service tests</p> <pre><code>from bali.tests import GRPCTestBase\nfrom service.demo import demo_service, demo_pb2, demo_pb2_grpc\nclass TestDemoRPC(GRPCTestBase):\n    server_class = demo_service.DemoService  # Provided service \n    pb2 = demo_pb2  # Provided pb2\n    pb2_grpc = demo_pb2_grpc  # Provided pb2 grpc\n    def setup_method(self):  # Pytest setup \n        pass\n    def teardown_method(self):  # Pytest teardown\n        pass\n    def test_demo(self):\n        pass\n</code></pre>"},{"location":"utility/","title":"Utils","text":"<p>dateparser </p> <p>dateparser docs</p> <p>MessageToDict/ParseDict</p> <p>Optimized MessageToDict/ParseDict from <code>google.protobuf.js_format</code></p> <pre><code>from bali.utils import MessageToDict, ParseDict\n</code></pre>"}]}